/**
 * 2.1 [CSS]: A√±ade un estilo que quite los m√°rgenes y paddings al elemento cuerpo del documento (body)
 * 2.2 [CSS]: A√±ade el color de fondo "#b7e3e4" al cuerpo del documento
 * 2.3 [CSS]: El documento deber√° tener un tama√±o de fuente base de "18px" y un alto de l√≠nea de "1.25"
 *
 * Aprovechamos de aplicarlo tanto al <body> como al <html>
 * El <html> es el √∫nico que puede contener el tama√±o de fuente ra√≠z o base
 * El tama√±o de fuente base es la medida a la que se relacionar√°n las unidades "rem" o "root em"
 * "em" es otra unidad de medida, pero que es relativa al contenedor con tama√±o de fuente m√°s cercano
 *
 * Curiosidad:
 * "em" viene de la letra "M" la cual se utilizaba como medida base para marcar el ancho de un caracter
 */
html, body {
    background: #b7e3e4;
    font-size: 18px;
    line-height: 1.25;
    padding: 0;
    margin: 0;

    /**
     * 4.1 A√±ade una tipograf√≠a de Google Fonts
     *   4.1.1 Si tienes tiempo, utiliza 2. Una solo para los titulares y la otra para el resto
     *
     * En este caso, la "Open Sans" la utilizar√© para casi todos los elementos, por lo tanto,
     * ser√° mi familia tipogr√°fica por defecto
     *
     * El resto de familias tipogr√°ficas son las de "fallback", en caso que no cargue correctamente
     * o hasta que no haya cargado la tipo seleccionada. Y va de izquierda a derecha
     * Para ello existen las llamadas web safe fonts: https://www.w3schools.com/cssref/css_websafe_fonts.asp
     */
    font-family: 'Open Sans', Helvetica, Arial, sans-serif;
}

/**
 * 4.1 A√±ade una tipograf√≠a de Google Fonts
 *   4.1.1 Si tienes tiempo, utiliza 2. Una solo para los titulares y la otra para el resto
 *
 * Y a√±adimos la "Merriweather" a todos los encabezados que necesitemos
 */
h1, h2, h3 {
    font-family: 'Merriweather', Georgia, serif;
}

/**
 * 2.4 [CSS]: El titular principal deber√° tener un tama√±o de fuente de "4.5rem"
 *
 * Al tener un tama√±o de fuente base de 18px ([2.3]), el tama√±o final de este titular ser√°
 * de 81px = (4.5 x 18px)
 */
h1 {
    font-size: 4.5rem;
}

/**
 * 2.5 [CSS]: El titular secundario deber√° tener un tama√±o de fuente de "3rem"
 *
 * Al tener un tama√±o de fuente base de 18px ([2.2]), el tama√±o final de este titular ser√°
 * de 81px = (4.5 x 18px)
 */
h2 {
    font-size: 3rem;
}

/**
 * 3.1.4 [CSS]: Deben visualizarse con columnas y sin decoraci√≥n ("¬∑")
 *
 * Para visualizarse en columnas, la manera m√°s sencilla es utilizando flexbox "flex"
 * Por defecto, flex muestra todxs sus hijxs en una sola fila "row"
 *
 * La propiedad "list-style" es la que marca qu√© estilo de vi√±eta tendremos
 * https://css-tricks.com/almanac/properties/l/list-style/ üëàüèΩ
 *
 * Y debemos eliminar (resetear) los estilos b√°sicos que nos dan margen a la lista
 * ya que ayudan a alinear la vi√±eta al resto del contenido
 */
ul {
    display: flex;
    list-style: none;
    padding: 0;
    margin: 0;
}

/**
 * 3.1.5 [CSS]: Posiciona de manera absoluta toda la cabecera y que ocupe todo el ancho
 */
.header {
    position: absolute;
    width: 100%;
    z-index: 2;
}

/**
 * 3.2.2 [CSS]: A√±ade la imagen de fondo que se encuentra en la carpeta "assets > img"
 * 3.2.3 [CSS]: Esta secci√≥n deber√° tener un alto m√≠nimo de "100vh" (Viewport Height)
 * 3.2.4 [CSS]: La imagen debe cubrir todo el contenedor, no repetirse y estar centrada
 *
 * En este caso, el acceso a la ruta de la imagen se complicaba un poco. La carpeta de
 * im√°genes (img) se encuentra al mismo nivel que la carpeta de estilos (css), por lo
 * tanto, ten√≠amos que retroceder una carpeta para acceder a ella. "../" significa
 * retroceder una carpeta
 *
 * Otra opci√≥n para poner la configuraci√≥n del background ser√≠a lo siguiente, aunque es
 * mejor utilizar la versi√≥n abreviada, nos ayuda a tener un archivo menos pesado:
 *
 * background-image: url(../img/seals.jpg);
 * background-position: 50%;
 * background-repeat: no-repeat;
 *
 * Alto m√≠nimo = min-height
 *
 * La propiedad "position" solamente son para el punto 4.4, de esta manera nuestro
 * contenido ser√° el contenedor del velo
 */
.billboard {
    background: url(../img/seals.jpg) 50% no-repeat;
    background-size: cover;
    color: #fff;
    min-height: 100vh;
    position: relative;

    /**
     * 4.2 [CSS]: Centra el contenido del billboard en el medio del contenedor
     * 
     * La manera m√°s sencilla de hacerlo es con Flexbox, con estas 3 propiedades centramos
     * los hijos horizontal y verticalmente
     */
    display: flex;
    align-items: center;
    justify-content: center;
}

/**
 * 4.4 [CSS]: Pon una capa con color de fondo "rgba(0, 0, 0, .75)" por encima de la imagen del Billboard, pero por debajo del texto
 *      4.4.1 Si puedes hacerlo con un pseudo-elemento, mejor
 *
 * Un pseudo-elemento nos ahorra de escribir HTML innecesario en varios casos.
 * Una capa o "velo" es el ejemplo perfecto para ejemplificar su uso. Para m√°s informaci√≥n
 * dejo estos links: https://developer.mozilla.org/es/docs/Web/CSS/Pseudoelementos y 
 * https://www.w3schools.com/css/css_pseudo_elements.asp
 *
 * La propiedad "content" es importante para los pseudo-elementos, de lo contrario no existir√≠an
 * Y para modificar su caja, necesitamos declararlo como un bloque (block)
 * El rgba se refiere a colores RGB con Alpha u opacidad, que va de 0 a 1
 * y el resto de propiedades es para darle tama√±o y posicionarlo en la ventana
 *
 * Recordad que si utilizamos posici√≥n absoluta, esta debe de ser relativa a otro elemento
 *
 * ::before o ::after, depende de qui√©n y c√≥mo se utilice. Yo prefiero ::before en este caso, ya que
 * est√° antes del contenido (jerarqu√≠a de contenido)
 */
.billboard::before {
    background: rgba(0, 0, 0, .75);
    content: '';
    display: block;
    height: 100%;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 0;
}

/**
 * 4.2 [CSS]: Como m√°ximo, este contenido del Billboard, deber√° tener "35rem" de ancho
 *
 * Al igual que en la secci√≥n par deber√≠amos envolver el contenido en un elemento contenedor <div>
 * y aplicar los estilos a dicho elemento. En este caso, el ancho m√°ximo es una medida concreta
 * 35rem (o 630px en una base de 18px - 35 x 18).
 * Recordad que al aplicar Flexbox, los elementos pierden su ancho, as√≠ que es mejor definir su
 * ancho al 100% ya que si tuviese poco contenido, su ancho, probablemente, ser√≠a menor de 35rem
 *
 * La propiedad "position" y "z-index" solamente son para el punto 4.4, de esta manera nuestro
 * contenido estar√° por sobre el velo
 */
.billboard__wrapper {
    max-width: 35rem;
    position: relative;
    text-align: center;
    width: 100%;
    z-index: 1;
}

/**
 * 3.2.6 [CSS]: Dale padding arriba y abajo de "2rem" a todas las secciones
 * 3.2.7 [CSS]: Cada secci√≥n deber√° tener un alto m√≠nimo de "40vh" (Viewport Height)
 *
 * Al tener una clase para todas las secciones, podemos reaprovecharla para dar estilo a los
 * elementos con esa clase
 *
 * En este caso, el uso del alto m√≠nimo (min-height) es mucho m√°s claro. Marcamos una altura m√≠nima del
 * elemento, pero si tuviese m√°s contenido, seguir√≠a creciendo
 */
.section {
    min-height: 40vh;
    padding: 2rem 0;
}

/**
 * 3.2.8 [CSS]: Modifica el color de fondo a "#167c80" y el color de fuente a "#fff" solo a la secci√≥n par
 *
 * La manera m√°s sencilla de realizar esta tarea es creando una clase especial que proporcione los estilos
 * marcados por el enunciado. De esta manera podr√≠amos reutilizarla en otras secciones.
 *
 * Existe una versi√≥n un poco m√°s compleja, y es utilizando una propiedad de css llamada "pseudo-clase". 
 * Para conseguir el mismo resultado la sintaxis ser√≠a:
 *
 * .section:nth-child(even) {
 *      ... aplicamos los estilos...
 * }
 *
 * En este caso estamos seleccionando los elemento pares (even) de un listado, al igual que podr√≠amos hacerlo
 * con los impares (odd)
 * Para m√°s informaci√≥n de este punto les dejo un enlace: https://developer.mozilla.org/es/docs/Web/CSS/:nth-child
 */
.even {
    background: #167c80;
    color: #fff;
    text-align: center;
}

/**
 * 3.2.10 [CSS]: En esta secci√≥n distinta: centra el texto, a√±ade una imagen debajo del p√°rrafo y como m√°ximo deber√° tener un ancho del 60% de su contenedor
 *
 * Ese elemento que creamos en HTML lo estilamos. Y en este caso utilizamos max-width, ya que
 * necesitamos que sea como m√°ximo 60% de su contenedor.
 * Al a√±adir breakpoints (responsive, media queries) podr√≠amos controlar que ese ancho m√°ximo
 * sea apartir de cierta medida de pantalla definida en el dise√±o
 */
.wrapper {
    margin: 0 auto;
    max-width: 60%;
}

/**
 * 3.3.2 [CSS]: Dale color de fondo "#1b1d1c" y color de fuente "#fff"
 * 3.3.3 [CSS]: Dale padding arriba y abajo de "1rem"
 * 3.3.3 [CSS]: Centra el texto
 *
 * Finalmente terminamos las secciones. Ten en cuenta que hay mucha diferencia con:
 * - Centrar el texto ‚Äî- text-align: center;
 * - Centrar el elemento ‚Äî- margin: 0 auto;
 *
 * Centraremos el elemento cuando este tenga un ancho menor que su contenedor. Como el ejemplo
 * de la secci√≥n par, y a la vez, podemos definir que el texto est√© centrado.
 */
.footer {
    background: #1b1d1c;
    color: #fff;
    padding: 1rem 0;
    text-align: center;
}